// Mocks generated by Mockito 5.4.5 from annotations
// in bums_n_tums/test/features/nutrition/providers/food_scanner_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bums_n_tums/features/nutrition/models/food_item.dart' as _i5;
import 'package:bums_n_tums/features/nutrition/repositories/food_repository.dart'
    as _i2;
import 'package:bums_n_tums/features/nutrition/services/open_food_facts_service.dart'
    as _i3;
import 'package:bums_n_tums/shared/analytics/crash_reporting_service.dart'
    as _i7;
import 'package:bums_n_tums/shared/analytics/firebase_analytics_service.dart'
    as _i6;
import 'package:flutter/foundation.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScanCountData_0 extends _i1.SmartFake implements _i2.ScanCountData {
  _FakeScanCountData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenFoodFactsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenFoodFactsService extends _i1.Mock
    implements _i3.OpenFoodFactsService {
  MockOpenFoodFactsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.FoodItem?> getProductByBarcode(String? barcode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductByBarcode,
          [barcode],
        ),
        returnValue: _i4.Future<_i5.FoodItem?>.value(),
      ) as _i4.Future<_i5.FoodItem?>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRepository extends _i1.Mock implements _i2.FoodRepository {
  MockFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initLocalDb() => (super.noSuchMethod(
        Invocation.method(
          #initLocalDb,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.ScanCountData> getTodayScanCount() => (super.noSuchMethod(
        Invocation.method(
          #getTodayScanCount,
          [],
        ),
        returnValue: _i4.Future<_i2.ScanCountData>.value(_FakeScanCountData_0(
          this,
          Invocation.method(
            #getTodayScanCount,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ScanCountData>);

  @override
  _i4.Future<void> updateScanCount(int? newCount) => (super.noSuchMethod(
        Invocation.method(
          #updateScanCount,
          [newCount],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveFoodItem(_i5.FoodItem? item) => (super.noSuchMethod(
        Invocation.method(
          #saveFoodItem,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.FoodItem>> getRecentScans({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentScans,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<List<_i5.FoodItem>>.value(<_i5.FoodItem>[]),
      ) as _i4.Future<List<_i5.FoodItem>>);

  @override
  _i4.Future<_i5.FoodItem?> getFoodItemByBarcode(String? barcode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodItemByBarcode,
          [barcode],
        ),
        returnValue: _i4.Future<_i5.FoodItem?>.value(),
      ) as _i4.Future<_i5.FoodItem?>);

  @override
  _i4.Future<void> deleteFoodItem(String? itemId) => (super.noSuchMethod(
        Invocation.method(
          #deleteFoodItem,
          [itemId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearLocalData() => (super.noSuchMethod(
        Invocation.method(
          #clearLocalData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i6.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> logEvent({
    required String? name,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logScreenView({
    required String? screenName,
    String? screenClass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenName: screenName,
            #screenClass: screenClass,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logSignUp({required String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#method: method},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logLogin({required String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
          {#method: method},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWorkoutStarted({
    required String? workoutId,
    required String? workoutName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logWorkoutStarted,
          [],
          {
            #workoutId: workoutId,
            #workoutName: workoutName,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWorkoutCompleted({
    required String? workoutId,
    required String? workoutName,
    required int? durationSeconds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logWorkoutCompleted,
          [],
          {
            #workoutId: workoutId,
            #workoutName: workoutName,
            #durationSeconds: durationSeconds,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logFoodScanned({required String? barcodeValue}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logFoodScanned,
          [],
          {#barcodeValue: barcodeValue},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void logError({
    required String? error,
    Map<String, Object>? parameters,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logError,
          [],
          {
            #error: error,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CrashReportingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashReportingService extends _i1.Mock
    implements _i7.CrashReportingService {
  MockCrashReportingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setUserIdentifier(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    dynamic reason,
    Iterable<_i8.DiagnosticsNode>? information = const [],
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {
            #reason: reason,
            #information: information,
            #fatal: fatal,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
