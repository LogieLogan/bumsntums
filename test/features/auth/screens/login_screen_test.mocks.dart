// Mocks generated by Mockito 5.4.5 from annotations
// in bums_n_tums/test/features/auth/screens/login_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bums_n_tums/features/auth/services/firebase_auth_service.dart'
    as _i3;
import 'package:bums_n_tums/shared/analytics/firebase_analytics_service.dart'
    as _i6;
import 'package:bums_n_tums/shared/models/app_user.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppUser_0 extends _i1.SmartFake implements _i2.AppUser {
  _FakeAppUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthService extends _i1.Mock
    implements _i3.FirebaseAuthService {
  MockFirebaseAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i4.Stream<_i5.User?>.empty(),
      ) as _i4.Stream<_i5.User?>);

  @override
  _i4.Future<_i2.AppUser> signUpWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signUpWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<_i2.AppUser> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<_i2.AppUser> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i4.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AppUser> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i4.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AppUser>);

  @override
  _i4.Future<_i2.AppUser> signInWithApple() => (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue: _i4.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signInWithApple,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AppUser>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i6.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> logEvent({
    required String? name,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logScreenView({
    required String? screenName,
    String? screenClass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenName: screenName,
            #screenClass: screenClass,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logSignUp({required String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#method: method},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logLogin({required String? method}) => (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
          {#method: method},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWorkoutStarted({
    required String? workoutId,
    required String? workoutName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logWorkoutStarted,
          [],
          {
            #workoutId: workoutId,
            #workoutName: workoutName,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWorkoutCompleted({
    required String? workoutId,
    required String? workoutName,
    required int? durationSeconds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logWorkoutCompleted,
          [],
          {
            #workoutId: workoutId,
            #workoutName: workoutName,
            #durationSeconds: durationSeconds,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logFoodScanned({required String? barcodeValue}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logFoodScanned,
          [],
          {#barcodeValue: barcodeValue},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void logError({
    required String? error,
    Map<String, Object>? parameters,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logError,
          [],
          {
            #error: error,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      );
}
